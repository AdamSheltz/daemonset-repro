apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cifs-credits-diag
  namespace: default
spec:
  selector:
    matchLabels:
      name: cifs-credits-diag
  template:
    metadata:
      labels:
        name: cifs-credits-diag
    spec:
      containers:
        - name: cifs-credits-diag
          image: alpine:latest
          lifecycle:
          postStart:
            exec:
              command: 
              - sh
              - -c
              - >
                logger "$(date -u +'%Y%b%d-%H-%M-%S') Container started in pod $(hostname)"
          preStop:
            exec:
              command: ["/bin/sh","-c","while killall cifs_credit_diag.sh; do sleep 1; done"]
          command:
            - nsenter
            - --target
            - "1"
            - --mount
            - --uts
            - --ipc
            - --pid
            - --
            - bash
            - -c
            - |
                #!/bin/bash
                DEBIAN_FRONTEND=noninteractive apt-get -y install trace-cmd
                ## ================ USER PARAMS ====================== ##
                DETECTION_INTERVAL_SEC=10   # dump "frequent" statistics once in this interval
                COLLECTION_INTERVAL_MULT=30 # dump "infrequent" statistics once in (DETECTION_INTERVAL_SEC * this mult) 
                CREDIT_LOG_INTERVAL_MULT=30 # dump credit history to syslog once in (DETECTION_INTERVAL_SEC * this mult)
                LOW_CREDIT_INSTANCES=12     # consecutive low-credit instances to trigger alert
                                            # (we want the lowcred condition to last at least 2 minutes)
                CIFS_INFLIGHT_THRESHOLD=5 
                CIFS_CREDIT_THRESHOLD=200   # cifs "low credit" threshold; we get 212 credits at mount-time.
                TRACE_CMD_BUFSZ_BYTES=$((16 * 1024 * 1024)) # 16 MB; per-cpu buffer size for trace-cmd
                DISK_SPACE_GROWTH_FACTOR=2  # (available space / this factor) gives us target logdir size
                LOGDIR_FILL_ETA_HRS=2       # bail out if we estimate that we will reach target logdir size in this time
                LOGDIR="/tmp/cc_logs"          # directory in which we collect logs
                ## ========== DO NOT MODIFY BELOW THIS LINE ========== ##
                
                ##
                STOP_COLLECTION_MARKER="/tmp/cifs_credit.stop"
                INITIAL_INFO="$LOGDIR/initial_system_info"
                ERR_LOG="$LOGDIR/errors"
                CRITICAL_TRIGGER_LOG="$LOGDIR/critical_triggers"
                DEBUGDATA_TMP="$LOGDIR/cifs_debug_data.tmp"
                DEBUGDATA_OUT="$LOGDIR/cifs_debug_data"
                CIFS_TRACE_DAT="trace.dat"
                CIFS_TRACE_OUT="$LOGDIR/cifs_trace"
                STATS_OUT="$LOGDIR/cifs_stats_out"
                DMESG_OUT="$LOGDIR/cifs_dmesg"
                CREDIT_HIST="$LOGDIR/cifs_credit_history"
                UNIQUE_HOSTNAMES="$LOGDIR/unique_sessions_hostnames"
                MY_PIDFILE="/tmp/cifs_credits_diag.pid"
                
                TRACE_CMD_INVOCATION="nohup trace-cmd record -e cifs -m $TRACE_CMD_BUFSZ_BYTES"
                ##
                
                INITIAL_UPTIME=0
                LOG_ROTATE_COUNT=0
                
                am_i_root() {
                    local euid=$(id -u)
                    if [ "$euid" -ne 0 ];
                    then
                        echo "Please run $0 as root"
                        exit
                    fi
                }
                
                rotate_logdir() {
                    #
                    # Archive current logdir
                    # Nuke existing log files
                    #
                    datestr=$(date -u +'%Y%b%d-%H-%M-%S')
                    tarball_name="$(hostname)_${datestr}_UTC_logs_${LOG_ROTATE_COUNT}.tgz"
                    temp_logdir="${LOGDIR}_${datestr}"
                    cp -r $LOGDIR "$temp_logdir"
                    tar czf $tarball_name $temp_logdir
                    rm -fR $temp_logdir
                    LOG_ROTATE_COUNT=$((LOG_ROTATE_COUNT + 1))
                
                    #Get rid of the oldest N logs?
                    rm -fR $LOGDIR;
                    mkdir $LOGDIR;
                }
                
                setup_logdir() {
                    if [[ -d $LOGDIR ]]; then
                        rotate_logdir
                    fi
                    if [[ ! -d $LOGDIR ]]; then
                        mkdir $LOGDIR
                    fi
                
                    local err="$?"
                    if [[ $err != 0 ]]; then
                        echo "Error creating logdir: $err" |tee $ERR_LOG
                        exit 1
                    fi
                }
                
                setup_debug() {
                    # Get rid of the initial contents of dmesg. We're not really interested in them.
                    # In any case, they should've been flushed down to /var/log/(kern.log|messages).
                    dmesg -c -T > /dev/null
                
                    echo 'module cifs +p'   > /sys/kernel/debug/dynamic_debug/control
                    echo 'file fs/cifs* +p' > /sys/kernel/debug/dynamic_debug/control
                    echo 7 > /proc/fs/cifs/cifsFYI
                
                    $TRACE_CMD_INVOCATION 0<&- > /dev/null 2>&1 &
                }
                
                check_diagcmds_present() {
                    which trace-cmd > /dev/null;
                    if [ $? == 1 ]; then
                        echo "trace-cmd is not installed"
                        exit 1
                    fi
                }
                
                check_space_consumption() {
                    #
                    # We'd like to do the following:
                    #   - Print a message on syslog
                    #   - Rotate and compress existing logs on disk
                    #
                    local current_uptime=$(awk -F[\ \.] '{print $1}' /proc/uptime);
                    local current_runtime_sec=$(( current_uptime - INITIAL_UPTIME ))
                    local disk_free_space_kb=$(df -k --total $(pwd) | awk '/total/ {print $2}')
                    local logdir_consumed_space_kb=$(du -k $LOGDIR | awk '{print $1}');
                    local time_to_fill_sec;
                    local time_to_fill_hrs;
                    local logdir_target_space_kb=$(                                         \
                                awk -v free_space=$disk_free_space_kb                       \
                                    -v growth_factor=$DISK_SPACE_GROWTH_FACTOR              \
                                        ' BEGIN {                                           \
                                            printf "%d\n", (free_space/growth_factor * 1.0) \
                                } '                                                         \
                    );
                
                    time_to_fill_sec=" -- ";
                    time_to_fill_hrs=" -- ";
                    if (( $current_runtime_sec > 0 )); then
                        time_to_fill_sec=$(                                                         \
                                awk -v space_consumed=$logdir_consumed_space_kb                     \
                                    -v time_taken=$current_runtime_sec                              \
                                    -v space_available=$logdir_target_space_kb                      \
                                    ' BEGIN {                                                       \
                                        growth_rate=(space_consumed/time_taken);                    \
                                        time_to_fill=(space_available/growth_rate);                 \
                                        printf "%d\n", time_to_fill                                 \
                                    } '                                                             \
                        );
                
                        time_to_fill_hrs=$(                           \
                                awk -v time_sec=$time_to_fill_sec     \
                                ' BEGIN {                             \
                                    printf "%d\n", (time_sec/3600)    \
                                } '                                   \
                        );
                
                        if (( time_to_fill_hrs <= LOGDIR_FILL_ETA_HRS )); then
                            logger -p local0.alert "ALERT: $0 $(pid $!) on $(hostname) $LOGDIR_FILL_ETA_HRS hours away from filling up the log directory."
                        fi
                    fi
                
                    echo
                    echo "current script runtime: $current_runtime_sec seconds"
                    echo "disk space available  : $disk_free_space_kb kbytes"
                    echo "space consumed by logs: $logdir_consumed_space_kb kbytes"
                    echo "target logdir space   : $logdir_target_space_kb kbytes"
                    echo "estimated time to reach target logdir space: $time_to_fill_sec seconds / $time_to_fill_hrs hours"
                    echo "  (under _current_ workload)"
                    echo
                    if (( logdir_space_consumed_kb >= logdir_target_space_kb )); then
                           echo "--> CROSSED TARGET LOGDIR SPACE THRESHOLD <--"
                           echo "--> STOPPING LOG COLLECTION               <--"
                           touch $STOP_COLLECTION_MARKER
                    fi
                }
                
                collect_initial_info() {
                    INITIAL_UPTIME=$(awk -F[\ \.] '{print $1}' /proc/uptime)
                
                    date -u;
                    echo "hostname $(hostname) running $(uname -smr)"
                    echo "/proc/uptime: $(cat /proc/uptime)";
                    echo "uptime: $(uptime)";
                    echo "last reboot info :"
                    last reboot;
                    egrep 'CIFS Version' /proc/fs/cifs/DebugData
                    mount.cifs -V;
                }
                
                cleanup_markers() {
                    if [[ -f $STOP_COLLECTION_MARKER ]]; then
                        rm -f $STOP_COLLECTION_MARKER;
                    fi
                }
                
                setup() {
                    cleanup_markers;
                    setup_logdir;
                    check_diagcmds_present |tee $ERR_LOG
                    setup_debug;
                	collect_initial_info > $INITIAL_INFO ;
                
                    trap stop_collection_and_exit SIGINT;
                    
                    echo $! > $MY_PIDFILE
                    echo "-----------------------------------------------------------------------------"
                    echo "Collecting CIFS credit and related stats ($(date -u +'%Y %b %d %H:%M:%S UTC'))"
                    echo "To stop log collection, please hit Ctrl-C, or run \"kill -9 $!\" as root"
                    echo "-----------------------------------------------------------------------------"
                }
                
                collect_infrequent_stats() {
                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $STATS_OUT
                    echo >> $STATS_OUT
                    cat /proc/fs/cifs/Stats >> $STATS_OUT
                    echo "===" >> $STATS_OUT
                
                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $DEBUGDATA_OUT
                    echo >> $DEBUGDATA_OUT
                    cat /proc/fs/cifs/DebugData >> $DEBUGDATA_OUT
                    echo "===" >> $DEBUGDATA_OUT
                
                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    echo $datestr >> $DMESG_OUT
                    echo >> $DMESG_OUT
                    dmesg -c -T >> $DMESG_OUT
                    echo "===" >> $DMESG_OUT
                }
                
                collect_stats() {
                    wcnt=$1
                
                    datestr="DATE: $(date -u +'%Y %b %d-%H:%M:%S') UTC"
                    cat /proc/fs/cifs/DebugData > $DEBUGDATA_TMP
                
                    #
                    # CIFS DebugData has the credit count on the line _immediately after_ the
                    # ConnectionId line.  We also want the inflight info.  Stitch the 4 lines
                    # including the ConnectionId line together, and mark it LOWCRED if the credit
                    # count is lower than the threshold.
                    #
                    # XXX what we need from debugdata:
                    #   - ConnectionId, Hostname, Num Credits, Req on Wire, and (empty) list of MIDs that follows the 'MIDs:' line.
                    #
                    echo "$datestr " >> $CREDIT_HIST
                    egrep -A3 'ConnectionId' $DEBUGDATA_TMP   |
                        tr -d '\n'                            |
                        sed 's/--/\n/g'                       |
                        awk -v threshold=$CIFS_CREDIT_THRESHOLD \
                            ' /ConnectionId/ {                  \
                                if ($9 <= threshold) {          \
                                    printf "%s LOWCRED\n", $0   \
                                } else {                        \
                                    printf "%s\n", $0           \
                                }} ' >> $CREDIT_HIST
                    echo >> $CREDIT_HIST
                    echo "== " >> $CREDIT_HIST
                    rm -f $DEBUGDATA_TMP
                
                    collect_infrequent_stats_trigger=$((wcnt % COLLECTION_INTERVAL_MULT))
                    if (( $collect_infrequent_stats_trigger == 0 ))
                    then
                        collect_infrequent_stats
                    fi
                
                    log_credit_score_trigger=$((wcnt % CREDIT_LOG_INTERVAL_MULT))
                    if (( $log_credit_score_trigger == 0 ))
                    then
                        # extract session id, mountpoint, credit score, and inflight requests.
                        # log these to syslog.
                        egrep -A3 'ConnectionId' /proc/fs/cifs/DebugData    |
                            tr -d '\n'                                      |
                            sed 's/--/\n/g' > $DEBUGDATA_TMP
                        echo >> $DEBUGDATA_TMP
                
                        while read cr_log_line; do
                            logger -p local0.warning "CIFS_CREDIT_LOG: $datestr $cr_log_line"
                        done<$DEBUGDATA_TMP
                    fi
                    rm -f $DEBUGDATA_TMP
                
                }
                
                
                check_trigger_conditions() {
                    local low_credit_count;
                    local zero_credit_count;
                    #
                    # === Check to see if the credit count is below 20, 3 times in a row ===
                    #
                    # Note that any instance of credit < 20 is marked LOWCRED in collect_stats.
                    # Create a list of unique (session_id, hostname) tuples, store each tuple
                    # as a regexp in the $UNIQUE_HOSTNAMES file.
                    #
                    awk '/ConnectionId/ {printf("%s.*%s\n", $3, $5)}' $CREDIT_HIST  |
                        sort  |
                        uniq  > $UNIQUE_HOSTNAMES;
                
                    #
                    #  For each (session_id, hostname), look at the last $LOW_CREDIT_INSTANCES
                    #  entries in the credit history; if all of them are marked LOWCRED, stop
                    #  log collection and generate the tarball.
                    #
                    local logs_need_rotation=0
                    while read hostsession; do
                        #lowcred_count=$(egrep $hostsession $CREDIT_HIST|
                        #               tail -n $LOW_CREDIT_INSTANCES   |
                        #               egrep -c 'LOWCRED')
                
                        #
                        # make sure that we see LOWCRED, as well as $(NF - 1) <= 2
                        # $(NF - 1) is _coincidentally_ the inflight request count.
                        #
                        # XXX - check the inflight count and compare it with the 
                        #       number of MIDs in the MID list from debugdata?
                        #
                        low_credit_count=$(egrep $hostsession $CREDIT_HIST  |
                                        tail -n $LOW_CREDIT_INSTANCES       |
                                        awk -v if_threshold=$CIFS_INFLIGHT_THRESHOLD    \
                                        'BEGIN {                                        \
                                            lowcred_count=0;                            \
                                        }                                               \
                                        ($(NF-1) <= if_threshold) && /LOWCRED/ {        \
                                            lowcred_count++;                            \
                                        }                                               \
                                        END {                                           \
                                            printf "%d\n", lowcred_count;               \
                                        }'                                              \
                        );
                
                        if (( low_credit_count == LOW_CREDIT_INSTANCES ))
                        then
                            echo "--> Low credit situation found on $hostsession <--"
                            #
                            # do _not_ stop log collection, fire off an alert to syslog,
                            # rotate logs, and _continue_ until we hit the termination condition.
                            #
                            logs_need_rotation=1
                            logger -p local0.warning "CIFS_CREDIT_ALERT: low credit on $hostsession"
                        fi
                
                        #
                        # The "termination check" is (inflight <= 2) && (credit == 0)
                        #
                        zero_cred_count=$(egrep $hostsession $CREDIT_HIST   |
                            tail -n $LOW_CREDIT_INSTANCES                   |
                            awk 'BEGIN {                        \
                                    zero_cred_count=0;          \
                            }                                   \
                            ($(NF-1) <= 2) && ($9 == 0) {       \
                                zero_cred_count++;              \
                            }                                   \
                            END {                               \
                                printf "%d\n", zero_cred_count; \
                            }'                                  \
                         );
                
                        if (( zero_cred_count == LOW_CREDIT_INSTANCES )); then
                            logger -p local0.alert "CIFS_CREDIT_LOG: stopping log collection"
                            echo "--> HIT CRITICAL TRIGGER at $(date) -- BUT CONTINUING" >> $CRITICAL_TRIGGER_LOG
                            logs_need_rotation=1
                
                            # We keep running even if we hit the termination condition
                            #echo "--> Stopping log collection"
                            #teardown
                            #exit 1
                        fi
                    done<$UNIQUE_HOSTNAMES
                
                    if ((logs_need_rotation == 1)); then
                        logs_need_rotation=0;
                        rotate_logdir
                    fi
                }
                
                collect_periodic_stats() {
                    wakeup_count=0
                    while true
                    do
                        echo "Wakeup to collect stats [$wakeup_count]"
                        check_space_consumption;
                
                        if [ -e $STOP_COLLECTION_MARKER ]; then
                            rm -f $STOP_COLLECTION_MARKER;
                            break
                        fi
                
                        collect_stats $wakeup_count;
                        check_trigger_conditions;
                        wakeup_count=$((wakeup_count + 1))
                
                        sleep $DETECTION_INTERVAL_SEC;
                    done
                }
                
                kill_trace_cmd_gen_report() {
                    local retry=0
                	local trace_cmd_pid=$(pgrep trace-cmd | head -1)
                
                    kill -INT $trace_cmd_pid
                    while [ $? == 0 ] && [ $retry -lt 10 ]
                    do
                	   retry=$(( retry + 1 ))
                       sleep 1
                	   ps -p "$trace_cmd_pid" > /dev/null
                    done
                
                    trace-cmd report > $CIFS_TRACE_OUT
                }
                
                teardown_debug() {
                    kill_trace_cmd_gen_report
                
                    echo 0 > /proc/fs/cifs/cifsFYI;
                    echo 'file fs/cifs* -p' > /sys/kernel/debug/dynamic_debug/control
                    echo 'module cifs -p' > /sys/kernel/debug/dynamic_debug/control
                }
                
                teardown_errlog() {
                    #
                    # If the error log is empty, get rid of it
                    #
                    if [ ! -s $ERR_LOG ]; then
                        rm $ERR_LOG;
                    fi
                }
                
                stop_collection_and_exit() {
                    echo "Received Ctrl-C, stopping log collection and collating logs"
                    touch $STOP_COLLECTION_MARKER
                }
                
                teardown() {
                    collect_infrequent_stats;
                
                    teardown_debug;
                    teardown_errlog;
                
                    cur_tarball_prefix="$(hostname)_$(date -u +'%Y%b%d-%H-%M-%S')_UTC_logs"
                    tarball_name="${cur_tarball_prefix}_${LOG_ROTATE_COUNT}.tgz"
                    tar czf $tarball_name $LOGDIR
                
                    composite_tarball_name="COMPOSITE_${cur_tarball_prefix}.tgz"
                    tar czf $composite_tarball_name ./$(hostname)_*
                    echo ""
                    echo "==> Created composite tarball $composite_tarball_name"
                    echo "Please send a copy of this tarball to Microsoft support for further analysis"
                    echo "-----------------------------------------------------------------------------"
                    rm -f ./$(hostname)_*
                
                    if [[ -d $LOGDIR ]]; then
                         rm -fR $LOGDIR
                    fi
                }
                
                main() {
                    am_i_root
                    setup
                
                    collect_periodic_stats
                
                    teardown
                }
                
                main

         
          securityContext:
            privileged: true
      hostPID: true

       

